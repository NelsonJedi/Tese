import numpy as np # Necessary library
global status # Variable used to check if the graph is matrogenic or not

# Construct a canonical decomposition of the Graph G
def canonical_decomp(d, n):
    global status

    for i in range(n): # Construct the vector m(d)
        if (d[i]>=i):
            m = i + 1
    print("m(d) =", m)

    M = np.zeros((n, n)) # Construct the matrix M(d)
    for i in range(n):
        num_uns = d[i]
        count = 0
        for j in range(n):
            if j != i and count < num_uns:
                M[i, j] = 1
                count += 1
    print("M(d) =")
    print(M)

    s = np.sum(M, axis=0) # Construct the vector s(d)
    print("s(d) =", s)

    # Check if the graph is a O_n
    if np.array_equal(d, np.zeros_like(d)):
        on = n
        print(f"\nO_{on} found!")
        d_A = []
        d_B = d
        print("\nd_A =", d_A)
        print("d_B =", d_B)
        return []

    # Check if the graph is a K_n
    if np.array_equal(d, (n-1)*np.ones_like(d)):
        kn = n
        print(f"\nK_{kn} found!")
        d_A = d
        d_B = []
        print("\nd_A =", d_A)
        print("d_B =", d_B)
        return []

    t_encontrado = [] # Find the possible values for t
    for t in range(1, m + 1):
        if sum(d[:t]) == sum(s[:t]):
            t_encontrado.append(t)
    print("\nPossible t's =", t_encontrado)

    # If we can't find a value for t, then the graph is indecomposable
    if t_encontrado == []:
        print("\nThe graph is indecompasable!")
        identify_final(d)
        return []

    it=0
    while it <= (len(t_encontrado)-1):
        print(f"\nFor t={t_encontrado[it]}, we have:")
        l_encontrado = 0 # Find the value for l(t)
        for l in range(n): 
            if d[l]<t_encontrado[it]:
                l_encontrado = l+1
                break

        # If l(t)>t+1, then the Graph is decomposable 
        if(l_encontrado > t_encontrado[it] + 1):
            print("l(t) =", l_encontrado)
            d_A = np.zeros(t_encontrado[it])
            d_B = np.zeros(n-l_encontrado+1)
            d_C = np.zeros(l_encontrado-1 - (t_encontrado[it]+1) +1)
            d_A, d_B, d_C = parts(d, d_A, d_B, d_C, n, 
                                  t, t_encontrado[it], l, l_encontrado)
            identify_parts(d_A, d_B)
            return d_C

        # If l(t)=t+1, then the Graph is decomposable and its split
        elif(l_encontrado == t_encontrado[it] + 1):
            print(f"l(t) = {l_encontrado} (l=t+1)")
            print("\nSplit Graph!")
            d_A = np.zeros(t_encontrado[it])
            d_B = np.zeros(n-t_encontrado[it])

            for k in range(t_encontrado[it]): # Construct d_A
                d_A[k]=d[k]

            aux = 0
            for k in range(t_encontrado[it], n): # Construct d_B
                d_B[aux] = d[k]
                aux = aux + 1

            print("\nd_A = ", d_A)
            print("d_B = ", d_B)
            identify_parts(d_A, d_B)
            return []

        # If l(t)=0, then the Graph is decomposable and d_B is empty
        elif(l_encontrado == 0): 
            print("There is no l! (d_B is empty)\n")
            
            d_A = np.zeros(t_encontrado[it])
            d_B = []
            d_C = np.zeros(n-t_encontrado[it])
            
            for k in range(t_encontrado[it]): # Construct d_A
                d_A[k]=0
                
            aux = 0
            for k in range(t_encontrado[it], n): # Construct d_C
                d_C[aux] = d[k] - t_encontrado[it]
                aux = aux + 1
                
            print("\nd_A = ", d_A)
            print("d_B = ", d_B)
            print("d_C = ", d_C)
            identify_parts(d_A, d_B)
            print("\n")
            
            return d_C

        # If l(t)<t+1, check for the next value of t
        elif(l_encontrado < t_encontrado[it] + 1):
            print(" l<t+1! \n")
            it = it + 1
            
    print("The graph is indecomposable!")
    identify_final(d)
    return []

######################################################################

 # Construct the sequences d_A, d_B and d_C
def parts(d, d_A, d_B, d_C, n, t, t_encontrado, l, l_encontrado):
    global status
    
    for k in range(t_encontrado): # Construct d_A
        d_A[k] = d[k] - l_encontrado + t_encontrado + 1
        
    aux = 0
    for k in range(l_encontrado-1, n): # Construct d_B
        d_B[aux] = d[k]
        aux = aux + 1

    aux = 0
    for k in range(t_encontrado+1, l_encontrado): # Construct d_C
        d_C[aux] = d[k-1] - t_encontrado
        aux = aux + 1
    
    print("\nd_A = ", d_A)
    print("d_B = ", d_B)
    print("d_C = ", d_C)
    print("\n")
    
    return d_A, d_B, d_C

######################################################################

# Identify the graph induced by d_A and d_B
def identify_parts(d_A, d_B): 
    global status

    # Check if the graph is a K_1
    if np.array_equal(d_A, [0]) and len(d_B) == 0:
        print("\nK1 found!")
        status = status * 1
        return

    # Check if the graph is a O_n2 + K_n1
    if np.all(d_A == 0) and np.all(d_B == 0):
        n_A = len(d_A)
        n_B = len(d_B)
        print(f"\nO_{n_B}+K_{n_A} found!") 
        status = status * 1
        return

     # Check for a O_n
    if not np.array_equal(d_B, np.zeros(len(d_B))):
        n_zeros = np.sum(d_B == 0)
        if n_zeros > 0:
            non_zeros = [x for x in d_B if x != 0]
            d_B = np.array(non_zeros)
            print(f"\nO_{n_zeros} found!")

    # Check if the graph is a H_n
    n_A = len(d_A)
    n_B = len(d_B)
    if n_A == n_B and np.all(d_A == n_A) and np.all(d_B == 1): 
        print(f"\nH{n_A} found!")
        status = status * 1
        return

    # Check if the graph is a the complement of H_n
    if n_A == n_B and np.all(d_A == (2 * n_A - 2)) 
                     and np.all(d_B == (n_B - 1)):
        print(f"\nComplement of H{n_A} found!")
        status = status * 1
        return
    
    status = status * 0
    print("\nDidn't identify anything!")
    return

######################################################################

# Identify the graph induced by d_C at the end
def identify_final(d_C):
    global status

    d_C = remove_zeros(d_C)
    
    # Check if the graph is a C_5
    if np.array_equal(d_C, [2, 2, 2, 2, 2]):
        print("C5 found!")
        status = status * 1
        return

    # Check if the graph is a tK_2
    n_C = len(d_C)
    if n_C % 2 == 0 and np.all(d_C == 1):
        print(f"{n_C // 2}K2 found!")
        status = status * 1
        return

    # Check if the graph is the complement of tK_2
    if n_C % 2 == 0 and np.all(d_C == (n_C - 2)):
        print(f"Complement of {n_C // 2}K2 found!")
        status = status * 1
        return
    
    status = status * 0
    print("\nDidn't identify anything!")
    return

######################################################################

# Check for O_n looking at d_C
def remove_zeros(d_C):
    n_zeros = 0
    non_zeros = []

    for val in d_C:
        if val == 0:
            n_zeros += 1
        else:
            non_zeros.append(val)

    d_C = np.array(non_zeros)
    print(f"O_{n_zeros} found!")
    return d_C

######################################################################

G = Graph({0:[1,2,3,4], 1:[2,3,4], 2:[3,4], 3:[4,5], 4:[6]}) # Graph G
G.show()
d = G.degree_sequence() # Degree sequence of G
status = 1
while len(d) != 0:
    status = status * 1
    print("\nd =", d)
    n = len(d)
    d = np.array(d, dtype=int)
    d = canonical_decomp(d, n) # Canonical Decomposition of d
if status == 1: # If status = 1, then the graph is matrogenic
    print("\nThe graph is matrogenic!")
else: # If status = 0, then the graph is not matrogenic
    print("\nThe graph is not matrogenic!")
