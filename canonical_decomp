import numpy as np # Necessary library

# Construct a canonical decomposition of the Graph G
def canonical_decomp(d, n): 
    
    for i in range(n): # Construct the vector m(d)
        if (d[i]>=i):
            m = i + 1
    print("m(d) =", m)

    M = np.zeros((n, n)) # Construct the matrix M(d)
    todos_indices = np.arange(n)
    for i in range(n):
        num_uns = d[i]
        if num_uns > 0:
            candidatos = np.delete(todos_indices, i)
            num_uns = min(num_uns, len(candidatos))
            M[i, candidatos[:num_uns]] = 1

    print("M(d) =")
    print(M)

    s = np.sum(M, axis=0) # Construct the vector s(d)
    print("s(d) =", s)

    # Check if the graph is a O_n
    if np.array_equal(d, np.zeros_like(d)):
        on = n
        d_A = []
        d_B = d
        print("\nd_A =", d_A)
        print("d_B =", d_B)
        return []

    # Check if the graph is a K_n
    if np.array_equal(d, (n-1)*np.ones_like(d)):
        kn = n
        d_A = d
        d_B = []
        print("\nd_A =", d_A)
        print("d_B =", d_B)
        return []

    t_encontrado = [] # Find the possible values for t
    for t in range(1, m + 1):
        if sum(d[:t]) == sum(s[:t]):
            t_encontrado.append(t)
    print("\nPossible t's =", t_encontrado)

    # If we can't find a value for t, then the graph is indecomposable
    if t_encontrado == []:
        print("\nThe graph is indecomposable!")
        return []

    it=0
    while it <= (len(t_encontrado)-1):
        print(f"\nFor t={t_encontrado[it]}, we have:")
        l_encontrado = 0 # Find the value for l(t)
        for l in range(n):
            if d[l]<t_encontrado[it]:
                l_encontrado = l+1
                break

        # If l(t)>t+1, then the Graph is decomposable
        if(l_encontrado > t_encontrado[it] + 1):
            print("l(t) =", l_encontrado)
            d_A = np.zeros(t_encontrado[it])
            d_B = np.zeros(n-l_encontrado+1)
            d_C = np.zeros(l_encontrado-1 - (t_encontrado[it]+1) +1)
            d_A, d_B, d_C = parts(d, d_A, d_B, d_C, n, 
                                  t, t_encontrado[it], l, l_encontrado)
            return d_C
            
        # If l(t)=t+1, then the Graph is decomposable and its split
        elif(l_encontrado == t_encontrado[it] + 1):
            print(f"l(t) = {l_encontrado} (l=t+1)")
            print("\nSplit Graph!")
            d_A = np.zeros(t_encontrado[it])
            d_B = np.zeros(n-t_encontrado[it])

            for k in range(t_encontrado[it]):
                d_A[k]=d[k]

            aux = 0
            for k in range(t_encontrado[it], n):
                d_B[aux] = d[k]
                aux = aux + 1

            print("\nd_A = ", d_A)
            print("d_B = ", d_B)
            return []

        # If l(t)=0, then the Graph is decomposable and d_B is empty
        elif(l_encontrado == 0): 
            print("There is no l! (d_B is empty)\n")
            
            d_A = np.zeros(t_encontrado[it])
            d_B = []
            d_C = np.zeros(n-t_encontrado[it])
            
            for k in range(t_encontrado[it]):
                d_A[k]=0
                
            aux = 0
            for k in range(t_encontrado[it], n):
                d_C[aux] = d[k] - t_encontrado[it]
                aux = aux + 1
                
            print("\nd_A = ", d_A)
            print("d_B = ", d_B)
            print("d_C = ", d_C)
            print("\n")
            
            return d_C

        # If l(t)<t+1, check for the next value of t
        elif(l_encontrado < t_encontrado[it] + 1):
            print(" l<t+1! \n")
            it = it + 1
            
            
    print("The Graph is indecomposable!")
    return []

######################################################################

# Construct the sequences d_A, d_B and d_C
def parts(d, d_A, d_B, d_C, n, t, t_encontrado, l, l_encontrado):
    global status
    for k in range(t_encontrado): # Construct d_A
        d_A[k] = d[k] - l_encontrado + t_encontrado + 1
        
    aux = 0
    for k in range(l_encontrado-1, n): # Construct d_B
        d_B[aux] = d[k]
        aux = aux + 1

    aux = 0
    for k in range(t_encontrado+1, l_encontrado):# Construct d_C
        d_C[aux] = d[k-1] - t_encontrado
        aux = aux + 1
    
    print("\nd_A = ", d_A)
    print("d_B = ", d_B)
    print("d_C = ", d_C)
    print("\n")
    
    return d_A, d_B, d_C

######################################################################


G = Graph({0:[1,2,3,4], 1:[2,3,4], 2:[3,4], 3:[4,5], 4:[6]}) # Graph G
G.show()
d = G.degree_sequence() # Degree sequence of G
while len(d) != 0:
    print("\nd =", d)
    n = len(d)
    d = np.array(d, dtype=int)
    d = canonical_decomp(d, n) # Canonical Decomposition of d
